import { gridStringOrNumberComparator } from '@mui/x-data-grid-pro';
import { randomCommodity, randomDesk, randomEmail, randomFeeRate, generateFilledQuantity, randomId, randomIncoterm, generateIsFilled, randomQuantity, randomTraderName, randomUnitPrice, randomUnitPriceCurrency, randomStatusOptions, randomPnL, randomTradeDate, randomMaturityDate, randomBrokerId, randomCompanyName, randomCountry, randomCurrency, randomAddress, randomCity, randomUpdatedDate, randomCreatedDate, randomRateType, randomContractType, randomTaxCode } from '../services';
import { renderCountry, renderEmail, renderIncoterm, renderPnl, renderProgress, renderStatus, renderTotalPrice, renderEditCurrency, renderEditProgress, renderEditStatus, renderEditIncoterm } from '../renderer';
import { CONTRACT_TYPE_OPTIONS, COUNTRY_ISO_OPTIONS_SORTED, CURRENCY_OPTIONS, INCOTERM_OPTIONS, RATE_TYPE_OPTIONS, STATUS_OPTIONS, TAXCODE_OPTIONS } from '../services/static-data';
export var getCommodityColumns = function getCommodityColumns() {
  var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return [{
    field: 'id',
    generateData: randomId,
    hide: true
  }, {
    field: 'desk',
    headerName: 'Desk',
    generateData: randomDesk,
    width: 110
  }, {
    field: 'commodity',
    headerName: 'Commodity',
    generateData: randomCommodity,
    width: 180,
    editable: editable
  }, {
    field: 'traderName',
    headerName: 'Trader Name',
    generateData: randomTraderName,
    width: 120,
    editable: editable
  }, {
    field: 'traderEmail',
    headerName: 'Trader Email',
    generateData: randomEmail,
    renderCell: renderEmail,
    width: 150,
    editable: editable
  }, {
    field: 'quantity',
    headerName: 'Quantity',
    type: 'number',
    width: 140,
    generateData: randomQuantity,
    editable: editable,
    valueParser: function valueParser(value) {
      return Number(value);
    }
  }, {
    field: 'filledQuantity',
    headerName: 'Filled Quantity',
    generateData: generateFilledQuantity,
    renderCell: renderProgress,
    renderEditCell: renderEditProgress,
    type: 'number',
    width: 120,
    editable: editable
  }, {
    field: 'isFilled',
    headerName: 'Is Filled',
    align: 'center',
    generateData: generateIsFilled,
    type: 'boolean',
    width: 80,
    editable: editable
  }, {
    field: 'status',
    headerName: 'Status',
    generateData: randomStatusOptions,
    renderCell: renderStatus,
    renderEditCell: renderEditStatus,
    type: 'singleSelect',
    valueOptions: STATUS_OPTIONS,
    width: 150,
    editable: editable
  }, {
    field: 'unitPrice',
    headerName: 'Unit Price',
    generateData: randomUnitPrice,
    type: 'number',
    editable: editable,
    valueParser: function valueParser(value) {
      return Number(value);
    }
  }, {
    field: 'unitPriceCurrency',
    headerName: 'Unit Price Currency',
    generateData: randomUnitPriceCurrency,
    renderEditCell: renderEditCurrency,
    type: 'singleSelect',
    valueOptions: CURRENCY_OPTIONS,
    width: 120,
    editable: editable
  }, {
    field: 'subTotal',
    headerName: 'Sub Total',
    valueGetter: function valueGetter(_ref) {
      var row = _ref.row,
          rowNode = _ref.rowNode;
      return rowNode.isAutoGenerated ? null : row.quantity * row.unitPrice;
    },
    type: 'number',
    width: 120
  }, {
    field: 'feeRate',
    headerName: 'Fee Rate',
    generateData: randomFeeRate,
    type: 'number',
    width: 80,
    editable: editable,
    valueParser: function valueParser(value) {
      return Number(value);
    }
  }, {
    field: 'feeAmount',
    headerName: 'Fee Amount',
    valueGetter: function valueGetter(_ref2) {
      var row = _ref2.row,
          rowNode = _ref2.rowNode;
      return rowNode.isAutoGenerated ? null : row.feeRate * row.quantity * row.unitPrice;
    },
    type: 'number',
    width: 120
  }, {
    field: 'incoTerm',
    generateData: randomIncoterm,
    renderCell: renderIncoterm,
    renderEditCell: renderEditIncoterm,
    type: 'singleSelect',
    valueOptions: INCOTERM_OPTIONS,
    editable: editable
  }, {
    field: 'totalPrice',
    headerName: 'Total in USD',
    valueGetter: function valueGetter(_ref3) {
      var row = _ref3.row,
          rowNode = _ref3.rowNode;
      return rowNode.isAutoGenerated ? null : row.feeRate + row.quantity * row.unitPrice;
    },
    renderCell: renderTotalPrice,
    type: 'number',
    width: 160
  }, {
    field: 'pnl',
    headerName: 'PnL',
    generateData: randomPnL,
    renderCell: renderPnl,
    type: 'number',
    width: 140
  }, {
    field: 'maturityDate',
    headerName: 'Maturity Date',
    generateData: randomMaturityDate,
    type: 'date',
    editable: editable
  }, {
    field: 'tradeDate',
    headerName: 'Trade Date',
    generateData: randomTradeDate,
    type: 'date',
    editable: editable
  }, {
    field: 'brokerId',
    headerName: 'Broker Id',
    generateData: randomBrokerId,
    hide: true,
    editable: editable
  }, {
    field: 'brokerName',
    headerName: 'Broker Name',
    generateData: randomCompanyName,
    width: 140,
    editable: editable
  }, {
    field: 'counterPartyName',
    headerName: 'Counterparty',
    generateData: randomCompanyName,
    width: 180,
    editable: editable
  }, {
    field: 'counterPartyCountry',
    headerName: 'Counterparty Country',
    type: 'singleSelect',
    generateData: randomCountry,
    renderCell: renderCountry,
    valueOptions: COUNTRY_ISO_OPTIONS_SORTED,
    valueParser: function valueParser(value) {
      if (typeof value === 'string') {
        return COUNTRY_ISO_OPTIONS_SORTED.find(function (country) {
          return country.value === value;
        });
      }

      return value;
    },
    valueFormatter: function valueFormatter(_ref4) {
      var value = _ref4.value;
      return value == null ? void 0 : value.label;
    },
    groupingValueGetter: function groupingValueGetter(params) {
      return params.value.code;
    },
    sortComparator: function sortComparator(v1, v2, param1, param2) {
      return gridStringOrNumberComparator(v1.label, v2.label, param1, param2);
    },
    editable: editable,
    width: 120
  }, {
    field: 'counterPartyCurrency',
    headerName: 'Counterparty Currency',
    generateData: randomCurrency,
    renderEditCell: renderEditCurrency,
    type: 'singleSelect',
    valueOptions: CURRENCY_OPTIONS,
    editable: editable
  }, {
    field: 'counterPartyAddress',
    headerName: 'Counterparty Address',
    generateData: randomAddress,
    width: 200,
    editable: editable
  }, {
    field: 'counterPartyCity',
    headerName: 'Counterparty City',
    generateData: randomCity,
    width: 120,
    editable: editable
  }, {
    field: 'taxCode',
    headerName: 'Tax Code',
    generateData: randomTaxCode,
    type: 'singleSelect',
    valueOptions: TAXCODE_OPTIONS,
    editable: editable
  }, {
    field: 'contractType',
    headerName: 'Contract Type',
    generateData: randomContractType,
    type: 'singleSelect',
    valueOptions: CONTRACT_TYPE_OPTIONS,
    editable: editable
  }, {
    field: 'rateType',
    headerName: 'Rate Type',
    generateData: randomRateType,
    type: 'singleSelect',
    valueOptions: RATE_TYPE_OPTIONS,
    editable: editable
  }, {
    field: 'lastUpdated',
    headerName: 'Updated on',
    generateData: randomUpdatedDate,
    type: 'dateTime',
    width: 180,
    editable: editable
  }, {
    field: 'dateCreated',
    headerName: 'Created on',
    generateData: randomCreatedDate,
    type: 'date',
    width: 150,
    editable: editable
  }];
};