"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DemoLink = void 0;
exports.renderLink = renderLink;

var React = _interopRequireWildcard(require("react"));

var _styles = require("@mui/material/styles");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Link = (0, _styles.styled)('a')({
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap',
  overflow: 'hidden',
  color: 'inherit'
});
const DemoLink = /*#__PURE__*/React.memo(function DemoLink(props) {
  const handleClick = event => {
    event.preventDefault();
    event.stopPropagation();
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Link, {
    tabIndex: -1,
    onClick: handleClick,
    href: props.href,
    children: props.children
  });
});
exports.DemoLink = DemoLink;

function renderLink(params) {
  if (params.rowNode.isAutoGenerated || !params.value) {
    return '';
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DemoLink, {
    href: params.value,
    children: params.value
  });
}