"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderStatus = renderStatus;

var React = _interopRequireWildcard(require("react"));

var _ReportProblem = _interopRequireDefault(require("@mui/icons-material/ReportProblem"));

var _Info = _interopRequireDefault(require("@mui/icons-material/Info"));

var _Autorenew = _interopRequireDefault(require("@mui/icons-material/Autorenew"));

var _Done = _interopRequireDefault(require("@mui/icons-material/Done"));

var _Chip = _interopRequireDefault(require("@mui/material/Chip"));

var _styles = require("@mui/material/styles");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const StyledChip = (0, _styles.styled)(_Chip.default)(({
  theme
}) => ({
  justifyContent: 'left',
  '& .icon': {
    color: 'inherit'
  },
  '&.Open': {
    color: theme.palette.info.dark,
    border: `1px solid ${theme.palette.info.main}`
  },
  '&.Filled': {
    color: theme.palette.success.dark,
    border: `1px solid ${theme.palette.success.main}`
  },
  '&.PartiallyFilled': {
    color: theme.palette.warning.dark,
    border: `1px solid ${theme.palette.warning.main}`
  },
  '&.Rejected': {
    color: theme.palette.error.dark,
    border: `1px solid ${theme.palette.error.main}`
  }
}));
const Status = /*#__PURE__*/React.memo(props => {
  const {
    status
  } = props;
  let icon = null;

  if (status === 'Rejected') {
    icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ReportProblem.default, {
      className: "icon"
    });
  } else if (status === 'Open') {
    icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Info.default, {
      className: "icon"
    });
  } else if (status === 'PartiallyFilled') {
    icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Autorenew.default, {
      className: "icon"
    });
  } else if (status === 'Filled') {
    icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Done.default, {
      className: "icon"
    });
  }

  let label = status;

  if (status === 'PartiallyFilled') {
    label = 'Partially Filled';
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(StyledChip, {
    className: status,
    icon: icon,
    size: "small",
    label: label,
    variant: "outlined"
  });
});

function renderStatus(params) {
  if (params.rowNode.isAutoGenerated || params.value == null) {
    return '';
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Status, {
    status: params.value
  });
}