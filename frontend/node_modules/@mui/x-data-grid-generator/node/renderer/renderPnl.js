"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderPnl = renderPnl;

var React = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _styles = require("@mui/material/styles");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Value = (0, _styles.styled)('div')(({
  theme
}) => ({
  width: '100%',
  fontVariantNumeric: 'tabular-nums',
  '&.positive': {
    color: theme.palette.mode === 'light' ? theme.palette.success.dark : theme.palette.success.light
  },
  '&.negative': {
    color: theme.palette.mode === 'light' ? theme.palette.error.dark : theme.palette.error.light
  }
}));

function pnlFormatter(value) {
  return value < 0 ? `(${Math.abs(value).toLocaleString()})` : value.toLocaleString();
}

const Pnl = /*#__PURE__*/React.memo(function Pnl(props) {
  const {
    value
  } = props;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Value, {
    className: (0, _clsx.default)(value > 0 && "positive", value < 0 && "negative"),
    children: pnlFormatter(value)
  });
});

function renderPnl(params) {
  if (params.rowNode.isAutoGenerated || params.value == null) {
    return '';
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Pnl, {
    value: params.value
  });
}