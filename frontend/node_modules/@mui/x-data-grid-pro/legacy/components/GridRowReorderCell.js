import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { unstable_composeClasses as composeClasses } from '@mui/material';
import { GridEvents, gridRowTreeDepthSelector, gridSortModelSelector, useGridApiContext, useGridSelector, getDataGridUtilityClass, gridEditRowsStateSelector } from '@mui/x-data-grid';
import { useGridRootProps } from '../hooks/utils/useGridRootProps';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var useUtilityClasses = function useUtilityClasses(ownerState) {
  var isDraggable = ownerState.isDraggable,
      classes = ownerState.classes;
  var slots = {
    root: ['rowReorderCell', isDraggable && 'rowReorderCell--draggable'],
    placeholder: ['rowReorderCellPlaceholder']
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};

var GridRowReorderCell = function GridRowReorderCell(params) {
  var apiRef = useGridApiContext();
  var rootProps = useGridRootProps();
  var sortModel = useGridSelector(apiRef, gridSortModelSelector);
  var treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);
  var editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector); // eslint-disable-next-line no-underscore-dangle

  var cellValue = params.row.__reorder__ || params.id; // TODO: remove sortModel and treeDepth checks once row reorder is compatible

  var isDraggable = !!rootProps.rowReordering && !sortModel.length && treeDepth === 1 && Object.keys(editRowsState).length === 0;
  var ownerState = {
    isDraggable: isDraggable,
    classes: rootProps.classes
  };
  var classes = useUtilityClasses(ownerState);
  var publish = React.useCallback(function (eventName, propHandler) {
    return function (event) {
      // Ignore portal
      // The target is not an element when triggered by a Select inside the cell
      // See https://github.com/mui/material-ui/issues/10534
      if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {
        return;
      } // The row might have been deleted


      if (!apiRef.current.getRow(params.row.id)) {
        return;
      }

      apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(params.row.id), event);

      if (propHandler) {
        propHandler(event);
      }
    };
  }, [apiRef, params.row.id]);
  var draggableEventHandlers = {
    onDragStart: publish(GridEvents.rowDragStart),
    onDragOver: publish(GridEvents.rowDragOver),
    onDragEnd: publish(GridEvents.rowDragEnd)
  };
  return /*#__PURE__*/_jsxs("div", _extends({
    className: classes.root,
    draggable: isDraggable
  }, draggableEventHandlers, {
    children: [/*#__PURE__*/_jsx(rootProps.components.RowReorderIcon, {}), /*#__PURE__*/_jsx("div", {
      className: classes.placeholder,
      children: cellValue
    })]
  }));
};

export { GridRowReorderCell };
export var renderRowReorderCell = function renderRowReorderCell(params) {
  return /*#__PURE__*/_jsx(GridRowReorderCell, _extends({}, params));
};